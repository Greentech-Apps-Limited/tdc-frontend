| start >>> ./quiz-header.tsx >>>
import React, { useEffect, useState } from 'react';
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { ExitIcon, HeartReactIconFill, TimerIcon } from '@/icons';
import { formatTime } from '@/lib/utils/audio-utils';
import useQuizStore from '@/stores/quiz-store';

type QuizHeaderProps = {
  onExit: () => void;
};

const QuizHeader = ({ onExit }: QuizHeaderProps) => {
  const { timeRemaining, life, isTimerCritical } = useQuizStore();
  const t = useTranslations('ExitConfirmationModal');
  const [showFallingHeart, setShowFallingHeart] = useState(false);
  const [prevLife, setPrevLife] = useState(life);
  const [shake, setShake] = useState(false);

  useEffect(() => {
    if (life < prevLife) {
      setShowFallingHeart(true);
      setShake(true);
      setTimeout(() => setShowFallingHeart(false), 1000); // Duration of falling animation
      setTimeout(() => setShake(false), 300); // Duration of shake animation
    }
    setPrevLife(life);
  }, [life, prevLife]);

  return (
    <div className="flex items-center justify-between border-b border-neutral-200 bg-neutral px-6 py-4">
      <Button size="sm" variant="outline" className="gap-2 rounded-full" onClick={onExit}>
        <ExitIcon />
        <span>{t('exit')}</span>
      </Button>
      <div
        className={`flex items-center gap-1 rounded-full bg-neutral-100 px-2 py-1 ${
          isTimerCritical ? 'animate-pulse text-red-500' : ''
        }`}
      >
        <TimerIcon className="text-2xl" />
        <span className="text-lg font-semibold">{formatTime(timeRemaining)}</span>
      </div>
      <div
        className={`flex items-center gap-1 rounded-full bg-neutral-100 py-1 pl-3 pr-2
          ${shake ? 'animate-shake' : ''}
        `}
      >
        <span className="text-lg font-semibold">{life}</span>
        <div className="relative">
          <HeartReactIconFill className="text-2xl text-red-500" />
          {showFallingHeart && (
            <HeartReactIconFill className="absolute top-0 animate-heart-fall text-2xl text-red-500" />
          )}
        </div>
      </div>
    </div>
  );
};

export default QuizHeader;
<<< ./quiz-header.tsx <<< end |

| start >>> ./question-card.tsx >>>
import useQuizStore from '@/stores/quiz-store';

type QuestionCardProps = {
  children: React.ReactNode;
};

const QuestionCard = ({ children }: QuestionCardProps) => {
  const { currentQuestionIndex, currentQuestion } = useQuizStore();

  return (
    <div className="relative">
      <div className="rounded-3xl border border-neutral-300 bg-neutral p-6 shadow">
        <h2 className="mb-4 text-lg font-semibold">
          {currentQuestionIndex + 1}. {currentQuestion?.text}
        </h2>
        {children}
      </div>
      <div className="absolute -bottom-4 left-8 right-8 -z-10 rounded-3xl border border-neutral-300 bg-neutral p-4 shadow" />
    </div>
  );
};

export default QuestionCard;
<<< ./question-card.tsx <<< end |

| start >>> ./game-end-alert.tsx >>>
import React from 'react';
import { AlertDialog, AlertDialogContent } from '@/components/ui/alert-dialog';
import { Button } from '@/components/ui/button';
import { Clock, Star } from 'lucide-react';
import useQuizStore from '@/stores/quiz-store';

interface GameEndAlertProps {
  isOpen: boolean;
  onClose: () => void;
  onShowResults: () => void;
}

const GameEndAlert = ({ isOpen, onClose, onShowResults }: GameEndAlertProps) => {
  const { life, questions, correctAnswers, totalTimeSpent } = useQuizStore();

  const isLifeEnded = life === 0;
  const totalQuestions = questions.length;
  const percentage = Math.round((correctAnswers / totalQuestions) * 100);

  const getMessage = () => {
    if (isLifeEnded) {
      return "Don't worry! Practice makes perfect.";
    }
    if (percentage >= 80) {
      return 'Excellent! MashaAllah!';
    }
    if (percentage >= 60) {
      return 'Good effort! Keep going!';
    }
    return 'In Sha Allah! We will improve next time';
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <AlertDialog open={isOpen}>
      <AlertDialogContent className="max-w-md">
        <div className="flex flex-col items-center gap-6 p-4">
          <h2 className="text-2xl font-bold">{isLifeEnded ? 'Quiz Ended' : 'Quiz Completed!'}</h2>

          <div className="flex h-36 w-36 flex-col items-center justify-center rounded-full bg-neutral-50">
            <p
              className={`text-3xl font-bold ${percentage >= 60 ? 'text-green-500' : 'text-brown-500'}`}
            >
              {percentage}%
            </p>
            <p className="text-sm text-neutral-600">correct answers</p>
          </div>

          <p className="text-center text-lg text-neutral-600">{getMessage()}</p>

          <div className="flex w-full justify-between gap-4 rounded-lg bg-neutral-50 p-4">
            <div className="flex w-max items-center gap-2">
              <Star className="h-5 w-5 text-brown-500" />
              <span className="font-semibold">
                {correctAnswers}/{totalQuestions}
              </span>
            </div>
            <div className="flex w-max items-center gap-2">
              <Clock className="h-5 w-5 text-brown-500" />
              <span className="font-semibold">{formatTime(totalTimeSpent)}</span>
            </div>
          </div>

          <div className="grid w-full grid-cols-2 gap-4">
            <Button variant="outline" className="w-full rounded-full" onClick={onClose}>
              Play Again
            </Button>
            <Button
              className="w-full rounded-full bg-brown-600 hover:bg-brown-500"
              onClick={onShowResults}
            >
              View Results
            </Button>
          </div>
        </div>
      </AlertDialogContent>
    </AlertDialog>
  );
};

export default GameEndAlert;
<<< ./game-end-alert.tsx <<< end |

| start >>> ./quiz-intro-card.tsx >>>
import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';
import { Link } from '@/i18n/routing';

const StartQuizButton = ({ onClick }: { onClick: () => void }) => {
  const t = useTranslations('QuizIntroCard');
  return (
    <Button
      className="w-full rounded-full bg-brown-600 text-white hover:bg-brown-500"
      onClick={onClick}
    >
      {t('playNow')}
    </Button>
  );
};

const ViewLeaderBoardButton = () => {
  const t = useTranslations('QuizIntroCard');
  return (
    <Link href="/quiz/leaderboard">
      <Button className="w-full rounded-full" variant="outline">
        {t('viewLeaderBoard')}
      </Button>
    </Link>
  );
};

const QuizIntroCard = ({ setShowLevelModal }: { setShowLevelModal: (value: boolean) => void }) => {
  const t = useTranslations('QuizIntroCard');
  return (
    <section className="flex h-full flex-col justify-between rounded-4xl border border-neutral-300 bg-neutral p-6 shadow">
      <div className="space-y-4">
        <h1 className="font-hidayatullah_demo text-3xl font-bold">{t('title')}</h1>
        <p className="text-base">{t('description')}</p>
      </div>
      <div className="mt-auto flex max-w-96 gap-4 pt-4">
        <StartQuizButton onClick={() => setShowLevelModal(true)} />
        <ViewLeaderBoardButton />
      </div>
    </section>
  );
};

export default QuizIntroCard;
<<< ./quiz-intro-card.tsx <<< end |

| start >>> ./answer-options.tsx >>>
import React, { useEffect, useState } from 'react';
import useQuizStore from '@/stores/quiz-store';
import { Button } from '../ui/button';

const AnswerOptions = () => {
  const {
    currentQuestion,
    answerQuestion,
    selectedAnswer,
    nextQuestion,
    currentOptions,
    setCurrentOptions,
    isReducedOptions,
  } = useQuizStore();

  const [shake, setShake] = useState(false);

  useEffect(() => {
    if (currentQuestion && !isReducedOptions) {
      const options = [
        currentQuestion.right_answer,
        currentQuestion.option_2,
        currentQuestion.option_3,
        currentQuestion.option_4,
      ].filter((option): option is string => typeof option === 'string');
      const shuffledOptions = [...options].sort(() => Math.random() - 0.5);
      setCurrentOptions(shuffledOptions);
    }
  }, [currentQuestion, isReducedOptions, setCurrentOptions]);

  const handleAnswer = (answer: string) => {
    answerQuestion(answer);
    if (answer !== currentQuestion?.right_answer) {
      setShake(true);
      setTimeout(() => setShake(false), 300);
    }
    setTimeout(nextQuestion, 1000);
  };

  const getButtonClass = (option: string) => {
    if (!selectedAnswer) return '';
    if (option === currentQuestion?.right_answer) return 'bg-green-500 text-white';
    if (option === selectedAnswer && option !== currentQuestion?.right_answer)
      return 'bg-red-500 text-white';
    return '';
  };

  if (!currentQuestion) return null;

  return (
    <div className={`relative ${shake ? 'animate-shake' : ''}`}>
      <div className="space-y-2">
        {currentOptions.map((option, index) => (
          <Button
            key={`${currentQuestion.id}-${index}`}
            className={`w-full justify-start text-left ${getButtonClass(option)}`}
            variant="outline"
            onClick={() => handleAnswer(option)}
          >
            {option}
          </Button>
        ))}
      </div>
      {selectedAnswer !== null && (
        <div className="absolute inset-0 cursor-not-allowed bg-transparent" />
      )}
    </div>
  );
};

export default AnswerOptions;
<<< ./answer-options.tsx <<< end |

| start >>> ./exit-confirmation-modal.tsx >>>
import { useTranslations } from 'next-intl';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';

type ExitConfirmationModalProps = {
  onConfirm: () => void;
  onCancel: () => void;
  isOpen: boolean;
};

const ExitConfirmationModal = ({ onConfirm, onCancel, isOpen }: ExitConfirmationModalProps) => {
  const t = useTranslations('ExitConfirmationModal');

  return (
    <Dialog open={isOpen} onOpenChange={onCancel}>
      <DialogContent>
        <DialogHeader className="space-y-6">
          <DialogTitle>{t('title')}</DialogTitle>
          <DialogDescription>{t('description')}</DialogDescription>
        </DialogHeader>
        <DialogFooter>
          <Button variant="outline" className="rounded-full" onClick={onCancel}>
            {t('cancel')}
          </Button>
          <Button variant="destructive" className="min-w-48 rounded-full" onClick={onConfirm}>
            {t('exit')}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ExitConfirmationModal;
<<< ./exit-confirmation-modal.tsx <<< end |

| start >>> ./quiz-game.tsx >>>
import { useRouter } from '@/i18n/routing';
import QuizHeader from './quiz-header';
import QuestionCard from './question-card';
import AnswerOptions from './answer-options';
import NavigationControls from './navigation-controls';
import QuizContainer from './quiz-container';
import GameEndAlert from './game-end-alert';
import GameResultModal from './game-result-modal';
import ExitConfirmationModal from './exit-confirmation-modal';
import useQuizGame from '@/hooks/use-guiz-game';
import { resetAllStores } from '@/stores/quiz-store';

const QuizGame = () => {
  const router = useRouter();
  const {
    showEndAlert,
    showResultModal,
    showExitModal,
    handleExit,
    handleShowResults,
    handleExitModalClose,
  } = useQuizGame();

  const handleFinishGame = () => {
    resetAllStores();
    router.push('/quiz');
  };
  return (
    <div>
      <QuizHeader onExit={handleExit} />
      <QuizContainer>
        <QuestionCard>
          <AnswerOptions />
        </QuestionCard>
        <NavigationControls />
      </QuizContainer>

      <GameEndAlert
        isOpen={showEndAlert}
        onClose={handleFinishGame}
        onShowResults={handleShowResults}
      />

      <GameResultModal isOpen={showResultModal} onClose={handleFinishGame} />

      <ExitConfirmationModal
        onConfirm={handleFinishGame}
        onCancel={handleExitModalClose}
        isOpen={showExitModal}
      />
    </div>
  );
};

export default QuizGame;
<<< ./quiz-game.tsx <<< end |

| start >>> ./quiz-level-selection-modal.tsx >>>
import { useTranslations } from 'next-intl';
import { Button } from '../ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '../ui/dialog';
import { LevelStartIcon1, LevelStartIcon2, LevelStartIcon3 } from '@/icons';
import useQuizStore from '@/stores/quiz-store';
import { useEffect } from 'react';

type LevelData = {
  id: number;
  name: string;
  Icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;
};

const LevelButton = ({
  level,
  isSelected,
  onClick,
}: {
  level: LevelData;
  isSelected: boolean;
  onClick: () => void;
}) => {
  return (
    <Button
      variant="outline"
      className={`h-full w-full flex-col gap-1 p-3 ${isSelected ? 'border-2 border-purple-500' : ''}`}
      onClick={onClick}
    >
      <div>
        <level.Icon
          className={`h-16 w-24 ${isSelected ? 'text-purple-500' : 'text-neutral-300'}`}
        />
      </div>
      <p className="text-base font-semibold">{level.name}</p>
    </Button>
  );
};

const LevelSelection = ({
  selectedLevel,
  onLevelSelect,
}: {
  selectedLevel: number | null;
  onLevelSelect: (level: number) => void;
}) => {
  const t = useTranslations('QuizLevelSelectionModal');
  const levels: LevelData[] = [
    { id: 0, name: t('levels.easy'), Icon: LevelStartIcon1 },
    { id: 1, name: t('levels.medium'), Icon: LevelStartIcon2 },
    { id: 2, name: t('levels.hard'), Icon: LevelStartIcon3 },
  ];

  return (
    <div className="flex gap-3">
      {levels.map(level => (
        <LevelButton
          key={level.id}
          level={level}
          isSelected={selectedLevel === level.id}
          onClick={() => onLevelSelect(level.id)}
        />
      ))}
    </div>
  );
};

interface QuizLevelSelectionModalProps {
  onConfirm: (level: number) => void;
  onCancel: () => void;
}

const QuizLevelSelectionModal = ({ onConfirm, onCancel }: QuizLevelSelectionModalProps) => {
  const t = useTranslations('QuizLevelSelectionModal');
  const { selectedLevel, setSelectedLevel } = useQuizStore();

  useEffect(() => {
    // Set default level to medium (1) when modal opens
    if (selectedLevel === null) {
      setSelectedLevel(1);
    }
  }, [selectedLevel, setSelectedLevel]);

  return (
    <Dialog open={true} onOpenChange={onCancel}>
      <DialogContent>
        <DialogHeader className="space-y-6">
          <DialogTitle>{t('title')}</DialogTitle>
          <DialogDescription>{t('description')}</DialogDescription>
        </DialogHeader>
        <div>
          <LevelSelection selectedLevel={selectedLevel} onLevelSelect={setSelectedLevel} />
        </div>
        <DialogFooter>
          <Button variant="outline" className="rounded-full" onClick={onCancel}>
            {t('cancel')}
          </Button>
          <Button
            className="min-w-48 rounded-full"
            onClick={() => onConfirm(selectedLevel ?? 1)}
            disabled={selectedLevel === null}
          >
            {t('startQuiz')}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default QuizLevelSelectionModal;
<<< ./quiz-level-selection-modal.tsx <<< end |

| start >>> ./score-board.tsx >>>
import { useNumberTranslation } from '@/hooks/use-number-translation';
import { useTranslations } from 'next-intl';

type ScoreboardProps = {
  quizzesAttempted: number;
  score: number;
  leaderBoardPosition: number;
};

export const Scoreboard = ({ quizzesAttempted, score, leaderBoardPosition }: ScoreboardProps) => {
  const t = useTranslations('Scoreboard');
  const translateNumber = useNumberTranslation();

  return (
    <section className="h-full space-y-6 rounded-4xl border border-neutral-300 bg-neutral p-4 shadow">
      <div>
        <h1 className="text-xl font-semibold">{t('title')}</h1>
      </div>
      <section>
        <div className="grid grid-cols-2 gap-3">
          <div className="rounded-2xl bg-neutral-50 p-4">
            <p className="text-xl font-bold">
              {translateNumber(quizzesAttempted.toString().padStart(2, '0'))}
            </p>
            <p className="text-sm text-neutral-700">{t('quizzesAttempted')}</p>
          </div>
          <div className="rounded-2xl bg-neutral-50 p-4">
            <p className="text-xl font-bold">{translateNumber(score)}</p>
            <p className="text-sm text-neutral-700">{t('scoreOnQuizzes')}</p>
          </div>
          <div className="col-span-2 rounded-2xl bg-neutral-50 p-4">
            <p className="font-hidayatullah_demo text-3xl font-bold">
              {translateNumber(leaderBoardPosition)}
              {t('leaderboardSuffix')}
            </p>
            <p className="text-sm text-neutral-700">{t('onLeaderboard')}</p>
          </div>
        </div>
      </section>
    </section>
  );
};
<<< ./score-board.tsx <<< end |

| start >>> ./navigation-controls.tsx >>>
import React from 'react';
import { Button } from '@/components/ui/button';
import { SkipNextIconFill, TimerIconFill } from '@/icons';
import useQuizStore from '@/stores/quiz-store';

const NavigationControls = () => {
  const { pauseQuiz, skipQuestion, reduceOptions, pauseUsed, skipsRemaining, fiftyFiftyUsed } =
    useQuizStore();

  const controls = [
    {
      onClick: () => !pauseUsed && pauseQuiz(),
      icon: <TimerIconFill className="text-2xl text-neutral-500" />,
      disabled: pauseUsed,
      tooltip: 'Pause',
    },
    {
      onClick: skipQuestion,
      icon: <SkipNextIconFill className="text-2xl text-neutral-500" />,
      disabled: skipsRemaining === 0,
      tooltip: 'Skip',
    },
    {
      onClick: reduceOptions,
      icon: <span className="font-bold text-neutral-500">50/50</span>,
      disabled: fiftyFiftyUsed,
      tooltip: '50/50',
    },
  ];

  return (
    <div className="m-auto flex w-max justify-center gap-2 rounded-full border border-neutral-200 bg-neutral p-2 shadow">
      {controls.map((control, index) => (
        <Button
          key={index}
          variant="outline"
          className="h-[56px] w-[56px] rounded-full p-0"
          onClick={control.onClick}
          disabled={control.disabled}
          title={control.tooltip}
        >
          {control.icon}
        </Button>
      ))}
    </div>
  );
};

export default NavigationControls;
<<< ./navigation-controls.tsx <<< end |

| start >>> ./game-result-modal.tsx >>>
import { ScrollArea } from '@/components/ui/scroll-area';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import { CheckCircle, XCircle } from 'lucide-react';
import useQuizStore from '@/stores/quiz-store';
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

const GameResultModal = ({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) => {
  const { questions, selectedAnswers = [] } = useQuizStore();
  const correctAnswers = questions.filter((q, i) => selectedAnswers[i] === q.right_answer).length;
  const score = Math.round((correctAnswers / questions.length) * 100);

  return (
    <AlertDialog open={isOpen}>
      <AlertDialogContent className="flex h-[90vh] max-h-[800px] w-[90vw] max-w-3xl flex-col p-0 sm:p-4">
        <AlertDialogHeader className=" pb-0 sm:p-0">
          <AlertDialogTitle className="text-center text-xl font-semibold sm:text-2xl">
            Quiz Results
          </AlertDialogTitle>
        </AlertDialogHeader>

        <div className="flex flex-1 flex-col space-y-3  overflow-hidden p-6 sm:p-0 ">
          <div className="flex items-center justify-center space-x-4">
            <div className="text-primary text-lg font-bold sm:text-xl">{score}%</div>
            <Progress value={score} className="h-4 w-1/2" />
          </div>

          <p className="text-muted-foreground text-center text-sm sm:text-base">
            You answered {correctAnswers} out of {questions.length} questions correctly.
          </p>

          <ScrollArea className="flex-1 rounded-md border px-3 py-2">
            {questions.map((question, index) => {
              const userAnswer = selectedAnswers[index] || 'No answer';
              const isCorrect = userAnswer === question.right_answer;

              return (
                <div key={question.id} className="mb-6 last:mb-0">
                  <div className="flex items-start space-x-2">
                    <div className={`mt-1 ${isCorrect ? 'text-green-500' : 'text-red-500'}`}>
                      {isCorrect ? (
                        <CheckCircle className="h-5 w-5" />
                      ) : (
                        <XCircle className="h-5 w-5" />
                      )}
                    </div>

                    <div className="flex-1">
                      <h3 className="font-semibold">
                        {index + 1}. {question.text}
                      </h3>

                      <div className="mt-2 space-y-1">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm font-medium">Your answer:</span>
                          <span className={isCorrect ? 'text-green-500' : 'text-red-500'}>
                            {userAnswer}
                          </span>
                        </div>

                        {!isCorrect && (
                          <div className="flex items-center space-x-2">
                            <span className="text-sm font-medium">Correct answer:</span>
                            <span className="text-green-600">{question.right_answer}</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </ScrollArea>

          <div className="flex justify-end">
            <Button onClick={onClose} className="flex items-center space-x-2 rounded-full">
              <span>Back to Dashboard</span>
            </Button>
          </div>
        </div>
      </AlertDialogContent>
    </AlertDialog>
  );
};

export default GameResultModal;
<<< ./game-result-modal.tsx <<< end |

| start >>> ./quiz-game-wrapper.tsx >>>
'use client';
import { useEffect, useState } from 'react';
import useQuizStore from '@/stores/quiz-store';
import QuizGame from './quiz-game';
import { Question } from '@/lib/types/quiz-types';
import { useRouter } from '@/i18n/routing';

const QuizGameWrapper = () => {
  const { startQuiz, isPlaying, showResults, selectedLevel } = useQuizStore();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    if (selectedLevel === null) {
      router.replace('/quiz');
      return;
    }
    const fetchQuestionsAndStartQuiz = async () => {
      try {
        // Simulating API call with the provided data
        const data = {
          results: [
            {
              id: 6960,
              text: 'What is the meaning of the word "بَٰرَكَ" ',
              right_answer: 'Be blessed',
              categories: [1],
              option_2: 'Time, time',
              option_3: 'Will come',
              option_4: 'Feathers,',
              difficulty_level: 2,
            },
            {
              id: 6868,
              text: 'What is the meaning of the word "رَمَىٰ" ',
              right_answer: 'Throw',
              categories: [1],
              option_2: 'Hakim, judge',
              option_3: 'Sitting',
              option_4: 'High',
              difficulty_level: 2,
            },
            {
              id: 6824,
              text: 'What is the meaning of the word "زَرْع" ',
              right_answer: 'Crop, crop',
              categories: [1],
              option_2: 'Curse',
              option_3: 'Virtue, monarchy',
              option_4: 'Loyal',
              difficulty_level: 2,
            },
            {
              id: 17248,
              text: 'What is the meaning of the word "عُلْيَا" ',
              right_answer: 'High',
              categories: [1],
              option_2: 'Safe',
              option_3: 'Liar',
              option_4: 'Manually, nafs, soul',
              difficulty_level: 2,
              reference: '',
              last_modified: '2021-09-19T07:04:34.251150Z',
            },
            {
              id: 16871,
              text: 'What is the ruling on the "Musharaka" agreement in Islam?',
              right_answer: 'Halal',
              categories: [75, 37],
              option_2: 'Haram',
              option_3: 'Mustahab',
              option_4: 'Maqruh',
              difficulty_level: 5,
              reference: '',
              last_modified: '2021-10-26T11:10:11.140483Z',
            },
            {
              id: 12063,
              text: 'On what day did Adam (As) die?',
              right_answer: "On the Day of Jumu'ah",
              categories: [30],
              option_2: 'On the Day of Ashura',
              option_3: 'On Monday',
              option_4: 'On Saturday',
              difficulty_level: 3,
              reference: '',
              last_modified: '2021-09-17T08:19:01.934094Z',
            },
          ],
        };
        const questions: Question[] = data.results;
        startQuiz(questions);
        setIsLoading(false);
      } catch (err) {
        console.error('Failed to fetch questions:', err);
        setError('Failed to load quiz questions. Please try again.');
        setIsLoading(false);
      }
    };

    if (!isPlaying && !showResults) {
      fetchQuestionsAndStartQuiz();
    } else {
      setIsLoading(false);
    }
  }, [startQuiz, isPlaying, showResults, selectedLevel, router]);

  //TODO: handleRestartQuiz If needed
  // const handleRestartQuiz = () => {
  //   setIsLoading(true);
  //   endQuiz();
  // };

  if (isLoading) {
    return <div>Loading quiz...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  return <QuizGame />;
};

export default QuizGameWrapper;
<<< ./quiz-game-wrapper.tsx <<< end |

| start >>> ./quiz-container.tsx >>>
type QuizContainerProps = {
  children: React.ReactNode;
};

const QuizContainer = ({ children }: QuizContainerProps) => {
  return <div className="m-6 mx-auto max-w-md space-y-8">{children}</div>;
};

export default QuizContainer;
<<< ./quiz-container.tsx <<< end |

| start >>> ./quiz-dashboard.tsx >>>
'use client';

import { useState } from 'react';
import QuizIntroCard from './quiz-intro-card';
import { Scoreboard } from './score-board';
import QuizLevelSelectionModal from './quiz-level-selection-modal';
import { useRouter } from '@/i18n/routing';

const userScoreboard = {
  quizzesAttempted: 4,
  score: 8340,
  leaderBoardPosition: 53,
};

const QuizDashboard = () => {
  const { push } = useRouter();
  const [showLevelModal, setShowLevelModal] = useState(false);

  return (
    <section className="grid grid-cols-3 gap-6">
      <div className="col-span-2">
        <QuizIntroCard setShowLevelModal={setShowLevelModal} />
      </div>
      <div className="col-span-1">
        <Scoreboard {...userScoreboard} />
      </div>
      {showLevelModal && (
        <QuizLevelSelectionModal
          onConfirm={() => {
            // TODO: Handle exit confirmation
            push('/quiz/play-mode');
          }}
          onCancel={() => setShowLevelModal(false)}
        />
      )}
    </section>
  );
};

export default QuizDashboard;
<<< ./quiz-dashboard.tsx <<< end |

